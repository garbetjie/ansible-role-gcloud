---
-
  set_fact:
    instance_group: "{{ item }}"
-
  name: "Check if instance group '{{ instance_group.name }}' exists."
  register: gcloud_compute_existing_instance_group
  changed_when: false
  shell: gcloud beta compute instance-groups list --format=json --filter="name = {{ instance_group.name }}"

# Create instance groups.
-
  include: instance_groups/create.yaml
  when: gcloud_compute_existing_instance_group.stdout == '[]' and instance_group.state|default('present') == 'present'

# Set the autoscaling on managed instance groups.
-
  include: instance_groups/configure-managed.yaml
  when: instance_group.state|default('present') == 'present' and instance_group.managed

# Set the named ports.
-
  include: instance_groups/set-named-ports.yaml
  when: instance_group.state|default('present') == 'present' and instance_group.named_ports is defined

# Wait until the managed instance group is stable.
-
  name: "Wait until managed instance group '{{ instance_group.name }}' is stable."
  when: instance_group.managed and instance_group.wait|default(false, true)
  shell: |
    gcloud beta compute instance-groups managed wait-until-stable {{ instance_group.name }} \
    {% if instance_group.wait is number %} --timeout={{ instance_group.wait }} {% endif %} \
    {% if instance_group.zone is defined %} --zone="{{ instance_group.zone }}" {% endif %} \
    {% if instance_group.region is defined %} --region="{{ instance_group.region }}" {% endif %}

# Delete instance groups.
-
  include: "instance_groups/delete-{{ 'managed' if instance_group.managed else 'unmanaged' }}.yaml"
  when: gcloud_compute_existing_instance_group.stdout != '[]' and instance_group.state|default('present') == 'absent'